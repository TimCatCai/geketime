0
10141075193
1555504662
1551265605
1551129726
{'error': [], 'extra': [], 'data': {'list': [{'had_liked': False, 'comment_is_top': False, 'id': 70599, 'user_header': 'https://static001.geekbang.org/account/avatar/00/0f/bc/fe/b43be33e.jpg', 'comment_ctime': 1551145287, 'can_delete': False, 'user_name': '常江舟', 'product_type': 'c1', 'replies': [{'ctime': 1551188552, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25275', 'content': '正解<br>', 'utype': 1, 'comment_id': 70599, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 684450945351, 'comment_content': '从性能角度讲，我们为了提高执行一定计算机任务的效率，所以IO等待的时候不能让cpu闲着，所以我们把任务拆分交替执行，有了分时操作系统，出现了并发，后来cpu多核了又有了并行计算。这里也就是作者说的[分工]。分工以后我们为了进一步提升效率和更加灵活地达到目的，所以我们要对任务进行组织编排，也就是对线程组织编排。于是线程之间需要通信，于是操作系统提供了一些让进程，线程之间通信的方式。也就是作者说的[同步]。但是事物总不是完美的。并发和通信带来了较高的编程复杂度，同时也出现了多线程并发操作共享资源的问题。于是天下大势，分久必合，我们又要将对共享资源的访问串行化。所以我们根据现实世界的做法设计了了锁，信号量等等来补充这套体系。也就是作者所说的[互斥]！<br><br>综上，这一切均为提高性能的手段和对其所产生问题的解决方案。', 'like_count': 159}, {'had_liked': False, 'comment_is_top': False, 'id': 73244, 'user_header': 'https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg', 'comment_ctime': 1551843904, 'can_delete': False, 'user_name': 'Jerry银银', 'product_type': 'c1', 'replies': [{'ctime': 1551846944, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '26631', 'content': '我觉得你比我总结的好👍<br>', 'utype': 1, 'comment_id': 73244, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 315084456512, 'comment_content': '      这篇文章看了四五篇，写得真好，收获也很多。<br>      文中提到了两点真是发人深省：<br>      1. 方法论层面：「跳出来，看全景」 和 「钻进去，看本质」，这两条方法论，我想是适合很多领域的学习的。<br>      2. 并发领域的「全景图」。<br>      对于「全景图」，我之前也有一直在构建，可是因为知识储备不够，确实很难构建出来。稍微了解过并发领域知识的人都知道，里面的知识点、概念多而散：线程安全、锁、同步、异步、阻塞、非阻塞、死锁、队列(为什么并发要跟队列扯上关系)、闭锁、信号量、活锁等等。如果单个去学这些知识点，单个去练习，如果没有「主线」，后期很容易忘。我思考再思考，也总结了一下学习并发的主线：<br>      首先，得理解并发的重要性，为什么需要并发？对于这个问题，只需要放在潜意识里面，只需要两个字：性能！其它的细节，再去慢慢拓展。<br>      然后，既然并发很重要，而并发处理的是任务，接下就是：对任务的抽象、拆解、分工执行。而线程模型，只是其中的一种模型，还有多进程、协程。Java使用的是多线程模型，对应到具体的代码就是：Thread, Runnable, Task，执行任务有：Exectors。 引出了线程，有势必存在着线程安全性的问题，因为多线程访问，数据存在着不一致的问题。<br>      再然后，大的任务被拆解多个小的子任务，小的子任务被各自执行，不难想象，子任务之间肯定存在着依赖关系，所以需要协调，那如何协调呢？也不难想到，锁是非常直接的方式(Monitor原理)，但是只用锁，协调的费力度太高，在并发的世界里面，又有了一些其它的更抽象的工具：闭锁、屏障、队列以及其它的一些并发容器等；好了，协调的工作不难处理了。可是协调也会有出错的时候，这就有了死锁、活锁等问题，大师围绕着这个问题继续优化协调工具，尽量让使用者不容易出现这些活跃性问题；<br>      到此，「并发」的历史还在演化：如果一遇到并发问题，就直接上锁，倒也没有什么大问题，可是追求性能是人类的天性。计算机大师就在思考，能不不加锁也能实现并发，还不容易出错，于是就有了：CAS、copy-on-write等技术思想，这就是实现了「无锁」并发；<br>      可是，事情到此还没有完。如果以上这些个东西，都需要每个程序员自己去弄，然后自己保证正确性，那程序员真累死了，哪还有时间、精力创造这么多美好的应用！于是，计算机大师又开始思考，能不能抽象出统一「模型」，可能这就有了类似于「Java内存模型」这样的东西。<br>------------<br>借用宝令老师的语言，以上「是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识。我将其分享给你，希望对你也有用」。<br>', 'like_count': 73}, {'had_liked': False, 'comment_is_top': False, 'id': 70512, 'user_header': 'https://static001.geekbang.org/account/avatar/00/0f/a3/ba/7fd521b1.jpg', 'comment_ctime': 1551110917, 'can_delete': False, 'user_name': 'Minecraft', 'product_type': 'c1', 'discussion_count': 1, 'product_id': 100023901, 'score': 315083723525, 'comment_content': '并发编程学习 第一天 明天去面试 祝我好运', 'like_count': 73}, {'had_liked': False, 'comment_is_top': False, 'id': 73251, 'user_header': 'https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg', 'comment_ctime': 1551844542, 'can_delete': False, 'user_name': 'Jerry银银', 'product_type': 'c1', 'replies': [{'ctime': 1551846832, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '26630', 'content': '好厉害<br>', 'utype': 1, 'comment_id': 73251, 'user_name': '作者回复'}], 'discussion_count': 2, 'product_id': 100023901, 'score': 212005242046, 'comment_content': '之前看薛兆丰的《经济学通识》，他总结到，人类面临着四大基本约束：东西不够，生命有限，互相依赖，需要协调。当我看到这句话的时候，我猛然间意识到：计算机也同样面临着这四大基本约束。<br><br>在计算中，CPU、内存、IO、硬盘、带宽等，这些资源也都有不够的时候，而每个线程的也有着自己的生命周期，并且它们之间又是相互依赖的，也同样需要协调。<br><br>有了上面的这种想法，我觉得我学习计算机的知识有了章法可循。', 'like_count': 49}, {'had_liked': False, 'comment_is_top': False, 'id': 70569, 'user_header': 'https://static001.geekbang.org/account/avatar/00/11/ac/ef/494f56c3.jpg', 'comment_ctime': 1551142491, 'can_delete': False, 'user_name': 'crazypokerk', 'product_type': 'c1', 'replies': [{'ctime': 1551355722, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25562', 'content': '这个比喻我是服了<br>', 'utype': 1, 'comment_id': 70569, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 108925324891, 'comment_content': '感觉确实如老师所说的，知识不成体系，就像是奶酪，看着是一块，实则满眼孔洞，加油！', 'like_count': 25}, {'had_liked': False, 'comment_is_top': False, 'id': 70589, 'user_header': '', 'comment_ctime': 1551144367, 'can_delete': False, 'user_name': 'Handongyang', 'product_type': 'c1', 'replies': [{'ctime': 1551355670, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25561', 'content': '你的建议非常好，我努力向这个方向前进<br>', 'utype': 1, 'comment_id': 70589, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 91745457583, 'comment_content': '想给老师提一个建议，就是在开篇用一个问题来引出本篇所要讲述的内容，然后在结尾时的总结之前回答开篇的问题。最后，在总结之后再设计并提出一个问题，让大家来讨论和回答。每一课之后的激烈讨论将是最有意思的，望老师考虑一下，谢谢！', 'like_count': 21}, {'had_liked': False, 'comment_is_top': False, 'id': 70633, 'user_header': 'https://static001.geekbang.org/account/avatar/00/15/ff/27/136d59c4.jpg', 'comment_ctime': 1551151125, 'can_delete': False, 'user_name': '凌', 'product_type': 'c1', 'replies': [{'ctime': 1551365703, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25602', 'content': '使劲夸就行了，我不介意', 'utype': 1, 'comment_id': 70633, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 87450497045, 'comment_content': '令哥，你就坐我对面，让我如何评论啊！呵呵', 'like_count': 20}, {'had_liked': False, 'comment_is_top': False, 'id': 70612, 'user_header': 'http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqHMAwG4atmGJ6H1cs1o3yUE2UhEian6cmbp9BWC1V2S7zAQdQHWYtaZbjahKHsMSkje5GrGjo9Iug/132', 'comment_ctime': 1551146775, 'can_delete': False, 'user_name': '我会得到', 'product_type': 'c1', 'replies': [{'ctime': 1551365536, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25597', 'content': '借你吉言', 'utype': 1, 'comment_id': 70612, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 83155525399, 'comment_content': '全局思维加单点突破，这种方式屡试不爽。希望令哥沉住气不着急，好好打磨，慢慢更新，搞出精品，打造业界标杆😁', 'like_count': 19}, {'had_liked': False, 'comment_is_top': False, 'id': 73220, 'user_header': 'http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLU3Dqic1Ssf2icrm6OtqFoG9vicoypKkk2lmKufo2BFZsFwPGt6NX1Sf1LLw448ayygykg3CMaqXEDw/132', 'comment_ctime': 1551842387, 'can_delete': False, 'user_name': '墙角', 'product_type': 'c1', 'replies': [{'ctime': 1551882747, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '26734', 'content': '《Java并发编程实战》作者阵容可谓大师云集，也包括Doug Lea<br>《Java并发编程的艺术》讲解并发包内部实现原理，能读明白，内功大增<br>《图解Java多线程设计模式》并发编程设计模式方面的经典书籍<br>《操作系统：精髓与设计原理》经典操作系统教材<br>http:&#47;&#47;ifeve.com 国内专业并发编程网站<br>http:&#47;&#47;www.cs.umd.edu&#47;~pugh&#47;java&#47;memoryModel&#47; 很多并发编程的早期资料都在这里', 'utype': 1, 'comment_id': 73220, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 61681384531, 'comment_content': '正如老师所说，并发编程涉及的知识面比较广，无奈大学阶段没有学好，老师帮忙推荐下和并发编程相关的书籍。只有有了一定的知识铺垫，才能更好的理解并发编程。感谢！', 'like_count': 14}, {'had_liked': False, 'comment_is_top': False, 'id': 70706, 'user_header': 'http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIhvw4HpdqXOUJnFcRKsKZwZAubZwYCtqFYLNVpp52QEWTZoMHU0DU634loe8ia4iaZibBege6SpLatQ/132', 'comment_ctime': 1551167707, 'can_delete': False, 'user_name': 'minggushen', 'product_type': 'c1', 'replies': [{'ctime': 1551366219, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25610', 'content': '建议先做个冷热分离吧，如果不能做，建议分库，分片规则很重要，要结合业务，具体问题具体分析。回头我再出个分布式计算的专栏......', 'utype': 1, 'comment_id': 70706, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 40205873371, 'comment_content': '老师想请教您一个问题，目前公司需要进行分表操作，单表2亿数据，每年的增量也是两亿。有没有什么理论基础支持我分片的片数，以及是否需要分库以及其他注意事项。如果没有的话，老师按照您的经验，应该分成多少个片呢？目前是用的哈希对128取模进行的，分成128个表，是否合适呢。', 'like_count': 9}, {'had_liked': False, 'comment_is_top': False, 'id': 70814, 'user_header': 'https://static001.geekbang.org/account/avatar/00/15/60/a0/dc0bf77c.jpg', 'comment_ctime': 1551188442, 'can_delete': False, 'user_name': '梅云霞', 'product_type': 'c1', 'replies': [{'ctime': 1551366828, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25625', 'content': '买个专栏啊', 'utype': 1, 'comment_id': 70814, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 35910926810, 'comment_content': '总结<br><br>当初我学习 Java 并发编程的时候，试图上来就看 Java SDK 的并发包，但是很快就放弃了。原因是我觉得东西太多，眼花缭乱的，虽然借助网络上的技术文章，感觉都看懂了，但是很快就又忘了。实际应用的时候大脑也一片空白，根本不知道从哪里下手，有时候好不容易解决了个问题，也不知道这个方案是不是合适的。<br>说出了我的处境！如何记住Java SDK 的并发包就像记住ABC呢', 'like_count': 8}, {'had_liked': False, 'comment_is_top': False, 'id': 70689, 'user_header': 'https://static001.geekbang.org/account/avatar/00/0f/e7/41/2ea1f5dc.jpg', 'comment_ctime': 1551164709, 'can_delete': False, 'user_name': '王二宝', 'product_type': 'c1', 'replies': [{'ctime': 1551365919, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25608', 'content': '同感', 'utype': 1, 'comment_id': 70689, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 35910903077, 'comment_content': '我和老师的观念是一样的，如果碰到自己一直搞不定的问题时，我的应对方法也是：从两个方面突破。一个是“跳出来，看全景”，另一个是“钻进去，看本质”。', 'like_count': 8}, {'had_liked': False, 'comment_is_top': False, 'id': 71825, 'user_header': 'https://static001.geekbang.org/account/avatar/00/11/57/4e/dd45e359.jpg', 'comment_ctime': 1551444756, 'can_delete': False, 'user_name': '冉', 'product_type': 'c1', 'replies': [{'ctime': 1551450565, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '26005', 'content': '多谢建议，必须采纳！', 'utype': 1, 'comment_id': 71825, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 31616215828, 'comment_content': '个人一点建议因大家基础功底不一且并发知识面广，若专栏篇幅受限的话，还望讲的过程中给出一些相关链接知识，方便理解，望采纳！', 'like_count': 7}, {'had_liked': False, 'comment_is_top': False, 'id': 71402, 'user_header': 'https://static001.geekbang.org/account/avatar/00/16/0b/62/59653b39.jpg', 'comment_ctime': 1551333667, 'can_delete': False, 'user_name': 'Joker', 'product_type': 'c1', 'replies': [{'ctime': 1551351638, 'user_name_real': '郭蕾', 'uid': '1000473', 'id': '25554', 'content': '极客时间，哥哥', 'utype': 2, 'comment_id': 71402, 'user_name': '编辑回复'}], 'discussion_count': 1, 'product_id': 100023901, 'score': 27321137443, 'comment_content': '这是我在极客学院购买的第一份产品，也是因为纯洁的微笑才买的这份产品，希望自己能坚持下去，在并发编程这方面有点突破', 'like_count': 6}, {'had_liked': False, 'comment_is_top': False, 'id': 70594, 'user_header': 'https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg', 'comment_ctime': 1551145107, 'can_delete': False, 'user_name': '发条橙子 。', 'product_type': 'c1', 'replies': [{'ctime': 1551356328, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25569', 'content': '专栏有专门一期讲管程，每一期都会有相关推荐<br>', 'utype': 1, 'comment_id': 70594, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 18731014291, 'comment_content': '总结 ：<br><br>并发编程需要构造出一个全景图 。 只要分为三大点 ： 分工、协作、互斥。 <br><br>先将一个大的逻辑按不同的工作去分配给不同的线程 ， 这些线程可以同时进行 ，也可以一个线程结束后再进行下一个进程，这时就需要线程间的协作 ， 最后如果是多个线程同时进行并且会访问同一个共享资源时就需要对这个资源加锁以便造成资源的不一致 ，这就是互斥<br><br>当全景图有了就需要深入到各个点， java sdk 的并发包中提供了很多工具帮我们处理上面三大点， 比如分工的fork&#47;join 、协作的 future 、 互斥的各种锁以及无锁原子类等 。<br><br>这只是表面 ， 我们更要深入其中了解其背后的理论，比如很多 sdk并发包中的工具都是基于管程的思想 。 了解了这个思想才能举一反三 ，站在更高的视野去理解并发的本质<br><br>另外，希望老师也可以着重讲一些管程这类的原理概念，我也是第一次听到这个词甚是感兴趣 ， 并且老师说道并发的处理大多涉及操作系统相关的知识，也希望老师能推荐一些书籍或者文章资料便于我们更深入的理解学习', 'like_count': 4}, {'had_liked': False, 'comment_is_top': False, 'id': 70538, 'user_header': 'https://static001.geekbang.org/account/avatar/00/13/3d/51/9723276c.jpg', 'comment_ctime': 1551135049, 'can_delete': False, 'user_name': '邋遢的流浪剑客', 'product_type': 'c1', 'replies': [{'ctime': 1551355847, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25564', 'content': '那本书属于高段位的，适合学完这个专栏后再看<br>', 'utype': 1, 'comment_id': 70538, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 18731004233, 'comment_content': '过年的时候看了一遍java并发编程的艺术，感觉有点晕，正好跟着老师的课在深入理解一下', 'like_count': 4}, {'had_liked': False, 'comment_is_top': False, 'id': 70565, 'user_header': 'https://static001.geekbang.org/account/avatar/00/16/02/0e/b1097594.jpg', 'comment_ctime': 1551141853, 'can_delete': False, 'user_name': '木易走刀口', 'product_type': 'c1', 'replies': [{'ctime': 1551355766, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25563', 'content': '感谢杨总支持！', 'utype': 1, 'comment_id': 70565, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 14436043741, 'comment_content': '好东西值得认真学习', 'like_count': 3}, {'had_liked': False, 'comment_is_top': False, 'id': 75849, 'user_header': 'https://static001.geekbang.org/account/avatar/00/16/01/30/3be78805.jpg', 'comment_ctime': 1552481457, 'can_delete': False, 'user_name': '遠い道の先で', 'product_type': 'c1', 'replies': [{'ctime': 1552486970, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '27662', 'content': '眼光不错哈哈', 'utype': 1, 'comment_id': 75849, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 10142416049, 'comment_content': '1、跳出来看全景，钻进去看本质。<br>-在进入一个新领域学习时，建立一张学习线路的全景图，由点成线由线成面，贯穿整个学习过程。<br>-在学到某个具体问题时，钻进去看本质，了解技术背后的理论模型，了解当初这个理论产生的环境时什么，主要解决什么问题。<br>2、一些重要的知识前任一定有所研究并有相应的结果，可以先查阅目前最可靠的解决方案，提高自己的基线。<br>3、分工：将一个大的任务（项目）拆分成若干个小任务，并安排适合的成员去执行。<br>4、同步：每个小任务间可能存在相互依赖，同步需要做的是在前置任务完成后，通知后置任务启动。<br>5、互斥：互斥主要解决正确性问题。互斥要求同一时间，只允许一个线程访问共享变量。<br>6、管程monitor是解决并非问题的万？能？钥匙。（这个完全不理解）<br>7、一项优秀的理论往往在多个语言中都有体现，学习过程中应注重理论的学习。<br>—————<br>以上是听课过程中的笔记，下面说说自己的感悟：<br>        之前听过吴军老师的课程，讲到民间科学家为何难以作出成绩，是因为基线不高。老师在课中有讲到我们可以通过学习优秀前辈研究和成果去学习并发编程。非常同意两位老师的观点。<br>        跳出来看全景，钻进去看本质。这个观点很新颖我也非常认同，在日常的碎片化学习往往会让我们这学一点那些一点，感觉好像学了很多，但又感觉不知道学习什么。<br>        在学习前制定一张学习地图，就像一棵树先有树干再有树枝，会成长的枝繁叶茂的。<br>        平时遇到一个新的知识，我们可能一开始只知道怎么用，没有去探究它的本质，可能导致最终我们只会基础的使用而没有办法举一反三，下次遇到了还是新问题。<br>        这是第一次在极客时间购买课程，希望自己能跟上每一堂课，和大家一起成长。<br>', 'like_count': 2}, {'had_liked': False, 'comment_is_top': False, 'id': 72455, 'user_header': 'https://static001.geekbang.org/account/avatar/00/0f/93/1a/79b052df.jpg', 'comment_ctime': 1551630702, 'can_delete': False, 'user_name': 'Weixiao', 'product_type': 'c1', 'replies': [{'ctime': 1551708472, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '26337', 'content': '同步在不同的语境里，意思完全不一样。<br>函数调用有同步调用、异步调用；<br>并发里，稍微专业的说法是指线程间的通信<br>synchronized也被翻译成同步关键字。同步有时候是线程安全的代名词，总有人说“这个方法没有正确同步”；<br>所以没有必要纠结他纠结这个。不同语境能正确理解就行了。<br>', 'utype': 1, 'comment_id': 72455, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 10141565294, 'comment_content': '老师你好，看一些英文资料，你文中表达的互斥的含义，好像对应这个synchronize这个单词，这个单词被翻译成中文是“同步”，但是英文里说到sync这个概念的时候却在表达你文中所说的“互斥”的概念。你对并发的三个概念划分表示认同，但是中文的叫法，和之前看过的资料有一些不同，望老师指点。', 'like_count': 2}, {'had_liked': False, 'comment_is_top': False, 'id': 70552, 'user_header': 'https://static001.geekbang.org/account/avatar/00/12/f5/05/d6547381.jpg', 'comment_ctime': 1551140601, 'can_delete': False, 'user_name': '才才', 'product_type': 'c1', 'replies': [{'ctime': 1551143790, 'user_name_real': '王宝令', 'uid': '1269969', 'id': '25184', 'content': '分工主要是拆分任务，要找到瓶颈，设计如何用多线程解决，这个偏设计。同步主要是线程间如何通信，这个偏实现。例如网络io有瓶颈，你可以用一连接一线程来分工，也可以用一组线程监听事件，一组线程处理事件来分工。前一种是不需要同步的，线程间不需要通信。但是后一种需要，因为两组线程要通信', 'utype': 1, 'comment_id': 70552, 'user_name': '作者回复'}], 'discussion_count': 0, 'product_id': 100023901, 'score': 10141075193, 'comment_content': '问个问题，分工，同步这俩个概念感觉相似，有本质区别吗', 'like_count': 2}], 'page': {'count': 76, 'more': True}}, 'code': 0}
