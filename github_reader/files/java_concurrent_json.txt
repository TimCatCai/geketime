{"error":[],"extra":[],"data":{"list":[{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/7f\/ab\/7f4bff1bc47a5e3fe955a480596799ab.mp3","id":83087,"had_viewed":false,"audio_size":9666927,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/19\/f0\/19163cee729ef91c31c2d4bba7c3f3f0.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"630","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"开篇词 | 你为什么需要学习并发编程？","audio_time":"00:09:55","audio_title":"林林开篇词音频","author_name":"王宝令","audio_md5":"7f4bff1bc47a5e3fe955a480596799ab","article_sharetitle":"你为什么需要学习并发编程？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"55","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/7f\/ab\/7f4bff1bc47a5e3fe955a480596799ab\/ld\/ld.m3u8","article_could_preview":true,"include_audio":true,"article_summary":"看透并发的本质逻辑，坚持做有长期价值的事儿，让你的一分辛劳成就三分收获。","score":1551085500185,"article_ctime":1551085500},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/89\/39\/898b2e67383a200dff39514436ebc839.mp3","id":83267,"had_viewed":false,"audio_size":12282802,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/7c\/ce90523cdeedff8e1de92d0556bec57c.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"631","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"学习攻略 | 如何才能学好并发编程？","audio_time":"00:12:47","audio_title":"宝令学习攻略（不加音乐版） 未命名混音项目 1_缩混","author_name":"王宝令","audio_md5":"898b2e67383a200dff39514436ebc839","article_sharetitle":"如何才能学好并发编程？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"12","s":"47","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/89\/39\/898b2e67383a200dff39514436ebc839\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"学习并发编程时，如何才能一分辛劳三分收获呢？你需要有两个方面的突破。","score":1551110400608,"article_ctime":1551110400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/0d\/4e\/0d7670ed5a5b2b087dbe7516b2338a4e.mp3","id":83682,"had_viewed":false,"audio_size":14868836,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/bd\/de\/bdc7db1361d308d905a7685b0e18dede.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"01 | 可见性、原子性和有序性问题：并发编程Bug的源头","audio_time":"00:15:28","audio_title":"宝令01（修改）—2.27 宝令 ZOOM0006_01","author_name":"王宝令","audio_md5":"0d7670ed5a5b2b087dbe7516b2338a4e","article_sharetitle":"为什么并发编程容易出问题呢？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"15","s":"28","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/0d\/4e\/0d7670ed5a5b2b087dbe7516b2338a4e\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"深刻理解可见性、原子性、有序性在并发场景下的原理后，很多并发Bug都是可以理解和诊断的。","score":1551283200916,"article_ctime":1551283200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/4e\/a9\/4e47fabe747154115d55f37975b4bea9.mp3","id":84017,"had_viewed":false,"audio_size":13882377,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/75\/ec\/756c6a8e1eb77e2f56ca97d4a71f97ec.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"02 | Java内存模型：看Java如何解决可见性和有序性问题","audio_time":"00:14:27","audio_title":"宝令02～3.1 宝令 ZOOM0009 (1)_01","author_name":"王宝令","audio_md5":"4e47fabe747154115d55f37975b4bea9","article_sharetitle":"Java内存模型：看Java如何解决可见性和有序性问题","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"14","s":"27","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/4e\/a9\/4e47fabe747154115d55f37975b4bea9\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Java的内存模型是并发编程领域的一次重要创新，也是职场面试中的热门考点。它可以解决可见性和有序性导致的问题。","score":1551456000736,"article_ctime":1551456000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/c3\/c3\/c3944240aa84b97548046226397980c3.mp3","id":84344,"had_viewed":true,"audio_size":12428135,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/c1\/e5\/c19b0148575cbd819f54d4a04dd8dde5.jpg","had_freelyread":true,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"03 | 互斥锁（上）：解决原子性问题","audio_time":"00:12:56","audio_title":"宝令03～3.4 宝令 ZOOM0011_01","author_name":"王宝令","audio_md5":"c3944240aa84b97548046226397980c3","article_sharetitle":"互斥锁（上）：解决原子性问题","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"12","s":"56","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/c3\/c3\/c3944240aa84b97548046226397980c3\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"对于并发编程中的原子性问题，必须深入分析锁定对象和受保护资源的关系，综合考虑受保护资源的访问路径，多方面考量用好互斥锁。","score":1551715200845,"article_ctime":1551715200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/c8\/d1\/c8c4d60e8cd63aee893dcb395ef08dd1.mp3","id":84601,"had_viewed":true,"audio_size":9135718,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/c8\/54\/c8301ef2513f4466c3bbda3c17b8df54.jpg","had_freelyread":true,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"04 | 互斥锁（下）：如何用一把锁保护多个资源？","audio_time":"00:09:30","audio_title":"宝令04～修改3.6宝令 ZOOM0013_01（修改后）","author_name":"王宝令","audio_md5":"c8c4d60e8cd63aee893dcb395ef08dd1","article_sharetitle":"互斥锁（下）：如何用一把锁保护多个资源？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"30","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/c8\/d1\/c8c4d60e8cd63aee893dcb395ef08dd1\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"如何保护多个资源？类比门票管理，其实核心就是要选对锁，梳理出共享资源，找出访问路径，然后再将所有的访问路径设置合适的锁。","score":1551888000272,"article_ctime":1551888000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/82\/16\/8288a6fae8f67799fe9e032e9a423f16.mp3","id":85001,"had_viewed":true,"audio_size":12023808,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/db\/12\/db1e9a02a6f3a46138d3615ab1e96712.jpg","had_freelyread":true,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"05 | 一不小心就死锁了，怎么办？","audio_time":"00:12:31","audio_title":"宝令05（新，剪切）～3.7 宝令 05 (1)_01","author_name":"王宝令","audio_md5":"8288a6fae8f67799fe9e032e9a423f16","article_sharetitle":"一不小心就死锁了，怎么办？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"12","s":"31","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/82\/16\/8288a6fae8f67799fe9e032e9a423f16\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"在优化性能的过程中，要特别注意可能导致的死锁问题。","score":1552060800204,"article_ctime":1552060800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/2e\/5b\/2e5a654a57a3a1d8761333348a692d5b.mp3","id":85241,"had_viewed":true,"audio_size":10516770,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/f5\/fc\/f57bca3f3286acbd1b9f85e38d55e2fc.jpg","had_freelyread":true,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"06 | 用“等待-通知”机制优化循环等待","audio_time":"00:10:56","audio_title":"宝令06～3.8 宝令 06 (1)_01","author_name":"王宝令","audio_md5":"2e5a654a57a3a1d8761333348a692d5b","article_sharetitle":"用“等待-通知”机制优化循环等待","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"10","s":"56","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/2e\/5b\/2e5a654a57a3a1d8761333348a692d5b\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"等待-通知机制是一种非常普遍的线程间协作方式。","score":1552320000582,"article_ctime":1552320000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/39\/42\/39df59b09aee5af28b7677f991914142.mp3","id":85702,"had_viewed":false,"audio_size":12517119,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/8e\/1e\/8e353607b91432cd50f975d4ce35651e.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"07 | 安全性、活跃性以及性能问题","audio_time":"00:13:01","audio_title":"宝令07～3.13 07 (1)_01","author_name":"王宝令","audio_md5":"39df59b09aee5af28b7677f991914142","article_sharetitle":"并发编程中，你要重点关注安全性、活跃性以及性能问题","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"13","s":"01","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/39\/42\/39df59b09aee5af28b7677f991914142\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"并发编程是一个复杂的技术领域，微观上涉及到原子性问题、可见性问题和有序性问题，宏观则表现为安全性、活跃性以及性能问题。","score":1552492800352,"article_ctime":1552492800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/83\/9a\/83d985c86b402e89666092d791dd629a.mp3","id":86089,"had_viewed":false,"audio_size":11553849,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/ef\/81\/ef13035e6b394b0657e681648ccac681.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"08 | 管程：并发编程的万能钥匙","audio_time":"00:12:01","audio_title":"3.14 宝令08 (1)_01","author_name":"王宝令","audio_md5":"83d985c86b402e89666092d791dd629a","article_sharetitle":"管程：并发编程的万能钥匙","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"12","s":"01","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/83\/9a\/83d985c86b402e89666092d791dd629a\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"并发编程里两大核心问题——互斥和同步，都可以由管程来解决。学好管程，就相当于掌握了一把并发编程的万能钥匙。","score":1552665600357,"article_ctime":1552665600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/fa\/0d\/fac0721d577fefc74de980b361682b0d.mp3","id":86366,"had_viewed":false,"audio_size":13452930,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/71\/e3\/714208d4e10499868688361130d1d2e3.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"09 | Java线程（上）：Java线程的生命周期","audio_time":"00:14:00","audio_title":"修改 宝令09～3.17 宝令 09_01_01","author_name":"王宝令","audio_md5":"fac0721d577fefc74de980b361682b0d","article_sharetitle":"你该如何理解Java线程的生命周期？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"14","s":"00","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/fa\/0d\/fac0721d577fefc74de980b361682b0d\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"理解Java线程的各种状态以及生命周期对于诊断多线程Bug非常有帮助。","score":1552924800197,"article_ctime":1552924800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/b7\/93\/b7454829f207e4fce7fc42b40ae66b93.mp3","id":86666,"had_viewed":false,"audio_size":9795360,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/98\/b9\/98dbaa0e34f9082e929fbbf7a08a93b9.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"10 | Java线程（中）：创建多少线程才是合适的？","audio_time":"00:10:11","audio_title":"3.18 宝令10 (1)_01","author_name":"王宝令","audio_md5":"b7454829f207e4fce7fc42b40ae66b93","article_sharetitle":"Java中创建多少线程才是合适的？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"10","s":"11","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/b7\/93\/b7454829f207e4fce7fc42b40ae66b93\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"创建多少线程合适，这不是一个简单的问题，要看多线程具体的应用场景。","score":1553097600442,"article_ctime":1553097600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/db\/29\/db68790283e75fd25877579cad982129.mp3","id":86695,"had_viewed":false,"audio_size":7349651,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/4e\/bbbcfe66e76c61e14a94caf96bf3674e.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"11 | Java线程（下）：为什么局部变量是线程安全的？","audio_time":"00:07:38","audio_title":"3.18n 宝令 11 (2)_01","author_name":"王宝令","audio_md5":"db68790283e75fd25877579cad982129","article_sharetitle":"为什么说局部变量是线程安全的？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"07","s":"38","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/db\/29\/db68790283e75fd25877579cad982129\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"很多人都知道局部变量是不存在数据竞争的，但是至于原因嘛，就说不清楚了。","score":1553270400634,"article_ctime":1553270400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/42\/36\/42b535904316f092b21379de2ab9c936.mp3","id":87365,"had_viewed":false,"audio_size":9770402,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/74\/c9\/74c3b96e7526ecef0af465a5aeae47c9.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"12 | 如何用面向对象思想写好并发程序？","audio_time":"00:10:10","audio_title":"3.24 宝令 12 (2)_01","author_name":"王宝令","audio_md5":"42b535904316f092b21379de2ab9c936","article_sharetitle":"如何用面向对象思想写好并发程序？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"10","s":"10","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/42\/36\/42b535904316f092b21379de2ab9c936\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"在Java语言里，面向对象思想能够让并发编程变得更简单。","score":1553529600989,"article_ctime":1553529600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/06\/b7\/06ef485902909fe06a58ec768154c0b7.mp3","id":87749,"had_viewed":false,"audio_size":11918307,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/7c\/376ac60340047e281c510bf2780a8a7c.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"632","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"13 | 理论基础模块热点问题答疑","audio_time":"00:12:24","audio_title":"3.26 宝令13_01","author_name":"王宝令","audio_md5":"06ef485902909fe06a58ec768154c0b7","article_sharetitle":"Java并发编程理论基础模块热点问题答疑","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"12","s":"24","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/06\/b7\/06ef485902909fe06a58ec768154c0b7\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"学好理论有思路，关注细节定成败。","score":1553702400718,"article_ctime":1553702400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/e5\/0e\/e5795555e9b590061872a008bce13f0e.mp3","id":87779,"had_viewed":false,"audio_size":10629603,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/15\/e8\/150e3874c4d7686745f4810702dbdce8.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"14 | Lock和Condition（上）：隐藏在并发包中的管程","audio_time":"00:11:03","audio_title":"修改新 3.28 宝令 14 复制 复制_01_01_01","author_name":"王宝令","audio_md5":"e5795555e9b590061872a008bce13f0e","article_sharetitle":"Lock&Condition（上）：隐藏在并发包中的管程","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"11","s":"03","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/e5\/0e\/e5795555e9b590061872a008bce13f0e\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Java SDK并发包通过Lock和Condition两个接口来实现管程，分别解决互斥和同步问题。","score":1553875200184,"article_ctime":1553875200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/a7\/48\/a7f4aace2b9e3ee6473b670640e7d848.mp3","id":88487,"had_viewed":false,"audio_size":8729921,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/52\/92\/52adf3bce764143a94a93ace058ca592.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"15 | Lock和Condition（下）：Dubbo如何用管程实现异步转同步？","audio_time":"00:09:05","audio_title":"修改 3.31 宝令 15_01_01","author_name":"王宝令","audio_md5":"a7f4aace2b9e3ee6473b670640e7d848","article_sharetitle":"Lock&Condition（下）：Dubbo如何用管程实现异步转同步？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"05","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/a7\/48\/a7f4aace2b9e3ee6473b670640e7d848\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Lock&Condition实现的管程相对于synchronized实现的管程来说更加灵活、功能也更丰富。","score":1554134400175,"article_ctime":1554134400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/55\/65\/559dfe29a26ff9351fcd69e127609265.mp3","id":88499,"had_viewed":false,"audio_size":7335276,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/c7\/0a\/c7e8447ca5fdca13b6722802ac72e00a.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"16 | Semaphore：如何快速实现一个限流器？","audio_time":"00:08:43","audio_title":"4.2 宝令 新16_01(1)","author_name":"王宝令","audio_md5":"559dfe29a26ff9351fcd69e127609265","article_sharetitle":"Semaphore：如何快速实现一个限流器？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"43","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/55\/65\/559dfe29a26ff9351fcd69e127609265\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"使用信号量可以轻松实现一个限流器，并且帮助阻塞和唤醒操作，使用起来还是非常简单的。","score":1554307200151,"article_ctime":1554307200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/9a\/0b\/9ad06e966d88f117f54665f266c7640b.mp3","id":88909,"had_viewed":false,"audio_size":9187966,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/a7\/0b\/a7e94440eb86cdc080d32548f76fa80b.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"17 | ReadWriteLock：如何快速实现一个完备的缓存？","audio_time":"00:09:33","audio_title":"4.3 宝令 17_01","author_name":"王宝令","audio_md5":"9ad06e966d88f117f54665f266c7640b","article_sharetitle":"ReadWriteLock：如何快速实现一个完备的缓存？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"33","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/9a\/0b\/9ad06e966d88f117f54665f266c7640b\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"针对读多写少这种并发场景，Java SDK并发包提供了读写锁——ReadWriteLock，非常容易使用，并且性能很好。","score":1554480000073,"article_ctime":1554480000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/7d\/30\/7dd89361bb5afcbcdb844e1295617730.mp3","id":89456,"had_viewed":false,"audio_size":7823386,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/80\/7f\/8047b70edd87d8771ef3795764043c7f.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"18 | StampedLock：有没有比读写锁更快的锁？","audio_time":"00:08:08","audio_title":"4.7 宝令 18 (1)_01","author_name":"王宝令","audio_md5":"7dd89361bb5afcbcdb844e1295617730","article_sharetitle":"StampedLock：有没有比读写锁更快的锁？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"08","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/7d\/30\/7dd89361bb5afcbcdb844e1295617730\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"StampedLock的性能比读写锁还要好。本文介绍了它的使用方法、内部工作原理以及在使用时的注意事项。","score":1554739200586,"article_ctime":1554739200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/f7\/c1\/f7c9640777373dfd09007417872c34c1.mp3","id":89461,"had_viewed":false,"audio_size":9619803,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/19\/68\/194c4121e5c83edeea2be3d1fe077668.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"19 | CountDownLatch和CyclicBarrier：如何让多线程步调一致？","audio_time":"00:10:00","audio_title":"4.8 宝令19_01","author_name":"王宝令","audio_md5":"f7c9640777373dfd09007417872c34c1","article_sharetitle":"CountDownLatch和CyclicBarrier：如何让多线程步调一致？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"10","s":"00","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/f7\/c1\/f7c9640777373dfd09007417872c34c1\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"CountDownLatch和CyclicBarrier是Java并发包提供的两个非常易用的线程同步工具类。","score":1554912000693,"article_ctime":1554912000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/29\/6b\/29b1dc67aa9f87fdbfe6666d60fbc46b.mp3","id":90201,"had_viewed":false,"audio_size":9595617,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/50\/b6\/501e686085527f5dec72337f1d98f0b6.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"20 | 并发容器：都有哪些“坑”需要我们填？","audio_time":"00:09:59","audio_title":"宝令20～4.11 宝令 20_01（新修改）","author_name":"王宝令","audio_md5":"29b1dc67aa9f87fdbfe6666d60fbc46b","article_sharetitle":"并发容器：都有哪些“坑”需要我们填？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"59","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/29\/6b\/29b1dc67aa9f87fdbfe6666d60fbc46b\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Java 1.5之前提供的同步容器虽能保证线程安全，但性能很差；之后提供的并发容器则做了很多优化，并且类型也更加丰富了。","score":1555084800729,"article_ctime":1555084800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/e3\/04\/e324fca66b87e0e3f4d42ecd50f1aa04.mp3","id":90515,"had_viewed":false,"audio_size":12042478,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/97\/52\/97546f80afc4fe156386232bb7ac6c52.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"21 | 原子类：无锁工具类的典范","audio_time":"00:12:32","audio_title":"4.15 宝令 21 (1)_01","author_name":"王宝令","audio_md5":"e324fca66b87e0e3f4d42ecd50f1aa04","article_sharetitle":"原子类：无锁工具类的典范","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"12","s":"32","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/e3\/04\/e324fca66b87e0e3f4d42ecd50f1aa04\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Java SDK并发包将无锁方案封装提炼之后，实现了一系列的原子类，内容丰富。无锁方案相对互斥锁方案，最大的好处就是性能。","score":1555344000202,"article_ctime":1555344000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/98\/4b\/9804ba239742c26c8e1a8f7c56cfe54b.mp3","id":90771,"had_viewed":false,"audio_size":8733698,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b4\/da\/b4ba2177ffc160cb9489985170fa81da.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"22 | Executor与线程池：如何创建正确的线程池？","audio_time":"00:09:05","audio_title":"4.16 宝令 22 (1)_01","author_name":"王宝令","audio_md5":"9804ba239742c26c8e1a8f7c56cfe54b","article_sharetitle":"Executor与线程池：如何创建正确的线程池？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"05","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/98\/4b\/9804ba239742c26c8e1a8f7c56cfe54b\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"线程池在Java并发编程领域非常重要，很多大厂的编码规范都要求必须通过线程池来管理线程。","score":1555516800579,"article_ctime":1555516800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/dc\/7b\/dc11032defca4b14e9da7021b954787b.mp3","id":91292,"had_viewed":false,"audio_size":6613650,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/9c\/13\/9c522df06f77414922f409acad779013.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"23 | Future：如何用多线程实现最优的“烧水泡茶”程序？","audio_time":"00:06:52","audio_title":"4.18 宝令23_01_01","author_name":"王宝令","audio_md5":"dc11032defca4b14e9da7021b954787b","article_sharetitle":"Future：如何用多线程实现最优的“烧水泡茶”程序？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"06","s":"52","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/dc\/7b\/dc11032defca4b14e9da7021b954787b\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"利用多线程可以快速将一些串行的任务并行化，从而提高性能；如果任务之间有依赖关系，也基本上都可以用Future来解决。","score":1555689600266,"article_ctime":1555689600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/6c\/aa\/6cfa35dba8e235d7c8f720d50e360aaa.mp3","id":91569,"had_viewed":false,"audio_size":10466313,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/28\/a9\/2836ca68ffac8c5f8a48f18e6cf5cfa9.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"24 | CompletableFuture：异步编程没那么难","audio_time":"00:10:53","audio_title":"4.22 王宝令 24_01","author_name":"王宝令","audio_md5":"6cfa35dba8e235d7c8f720d50e360aaa","article_sharetitle":"CompletableFuture：异步编程没那么难","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"10","s":"53","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/6c\/aa\/6cfa35dba8e235d7c8f720d50e360aaa\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Java在1.8版本提供了CompletableFuture来支持异步编程，虽复杂但功能也着实让人震撼。","score":1555948800874,"article_ctime":1555948800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/02\/a5\/02b3f358bc9c92a599db387d9e8fe8a5.mp3","id":92245,"had_viewed":false,"audio_size":6569031,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/e0\/b0\/e06d497cb1ec96abb140ac5c991b73b0.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"25 | CompletionService：如何批量执行异步任务？","audio_time":"00:06:50","audio_title":"4.23 宝令 25_01","author_name":"王宝令","audio_md5":"02b3f358bc9c92a599db387d9e8fe8a5","article_sharetitle":"CompletionService：如何批量执行异步任务？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"06","s":"50","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/02\/a5\/02b3f358bc9c92a599db387d9e8fe8a5\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"CompletionService将线程池和阻塞队列的功能融合在了一起，能够让批量异步任务的管理更简单。","score":1556121600491,"article_ctime":1556121600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/2f\/1a\/2f97aabc0e5a4ae088472a22626b121a.mp3","id":92524,"had_viewed":false,"audio_size":9267434,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/ac\/a6\/ac42b85c499388f9945a56646224a5a6.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"26 | Fork\/Join：单机版的MapReduce","audio_time":"00:09:38","audio_title":"4.25 宝令26_01","author_name":"王宝令","audio_md5":"2f97aabc0e5a4ae088472a22626b121a","article_sharetitle":"Fork\/Join：单机版的MapReduce","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"38","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/2f\/1a\/2f97aabc0e5a4ae088472a22626b121a\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Fork\/Join并行计算框架主要解决的是分治任务，核心组件是ForkJoinPool，它支持任务窃取机制，性能很好。","score":1556294400999,"article_ctime":1556294400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/6a\/4e\/6a0bcaf7adc8d254862b78395270bf4e.mp3","id":92849,"had_viewed":false,"audio_size":9204054,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/6a\/a4\/6a1efaa5b5d50571cbdfbd356f9d80a4.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"633","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"27 | 并发工具类模块热点问题答疑","audio_time":"00:09:34","audio_title":"4.28宝令 27_01","author_name":"王宝令","audio_md5":"6a0bcaf7adc8d254862b78395270bf4e","article_sharetitle":"并发工具类模块热点问题答疑","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"34","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/6a\/4e\/6a0bcaf7adc8d254862b78395270bf4e\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"这模块13篇文章的13个思考题，基本上都是相关工具类在使用中需要特别注意的一些细节问题。","score":1556553600736,"article_ctime":1556553600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/5b\/d1\/5be77153cdd85307c18a142dfab22dd1.mp3","id":92856,"had_viewed":false,"audio_size":7626960,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/45\/26\/45444f012c3c1d6f1b0cd9a9c442bd26.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"28 | Immutability模式：如何利用不变性解决并发问题？","audio_time":"00:07:56","audio_title":"4.28 宝令 28_01","author_name":"王宝令","audio_md5":"5be77153cdd85307c18a142dfab22dd1","article_sharetitle":"Immutability模式：如何利用不变性解决并发问题？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"07","s":"56","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/5b\/d1\/5be77153cdd85307c18a142dfab22dd1\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Immutability模式是最简单的解决并发问题的方法，可以作为你解决并发问题的一个首选。","score":1556726400718,"article_ctime":1556726400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/d8\/61\/d897d55342923e76238d1bd93216ab61.mp3","id":93154,"had_viewed":false,"audio_size":8015204,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/a1\/0c\/a1dc680c51da0b2cf6f939298db6f40c.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"29 | Copy-on-Write模式：不是延时策略的COW","audio_time":"00:08:20","audio_title":"4.29 宝令 29 (1)_01","author_name":"王宝令","audio_md5":"d897d55342923e76238d1bd93216ab61","article_sharetitle":"Copy-on-Write模式：不是延时策略的COW","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"20","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/d8\/61\/d897d55342923e76238d1bd93216ab61\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Copy-on-Write在很多领域都有着广泛的应用，潜力巨大。","score":1556899200392,"article_ctime":1556899200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/28\/05\/2883f8de5a7e734241350a7716a4f105.mp3","id":93745,"had_viewed":false,"audio_size":8965593,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/cc\/fa\/ccb6d30d7082b3aab8f0609e181c41fa.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"30 | 线程本地存储模式：没有共享，就没有伤害","audio_time":"00:09:19","audio_title":"5.5 宝令 30 (1)_01","author_name":"王宝令","audio_md5":"2883f8de5a7e734241350a7716a4f105","article_sharetitle":"线程本地存储模式：没有共享，就没有伤害","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"19","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/28\/05\/2883f8de5a7e734241350a7716a4f105\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"线程本地存储模式本质上是一种避免共享的方案。没有共享，自然也就没有并发问题。","score":1557158400933,"article_ctime":1557158400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/20\/47\/20fec0307714e6780fdcee5a224c7047.mp3","id":94097,"had_viewed":false,"audio_size":8095913,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/35\/dc\/3594eb9df4eb9f459f8eb10a19e126dc.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"31 | Guarded Suspension模式：等待唤醒机制的规范实现","audio_time":"00:08:25","audio_title":"5.8 宝令 31 (1)_01","author_name":"王宝令","audio_md5":"20fec0307714e6780fdcee5a224c7047","article_sharetitle":"Guarded Suspension模式：等待唤醒机制的规范实现","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"25","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/20\/47\/20fec0307714e6780fdcee5a224c7047\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Guarded Suspension模式本质上是一种等待唤醒机制的实现，只不过规范化了。","score":1557331200979,"article_ctime":1557331200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/bd\/c0\/bda6f597c73273fbbf49069addaaa0c0.mp3","id":94604,"had_viewed":false,"audio_size":6825065,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/44\/86\/441bc6cd43de008c46c30171bb933b86.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"32 | Balking模式：再谈线程安全的单例模式","audio_time":"00:07:06","audio_title":"5.9 宝令 32_01","author_name":"王宝令","audio_md5":"bda6f597c73273fbbf49069addaaa0c0","article_sharetitle":"Balking模式：再谈线程安全的单例模式","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"07","s":"06","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/bd\/c0\/bda6f597c73273fbbf49069addaaa0c0\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Balking模式本质上是一种规范化地解决“多线程版本的if”的方案，经典实现是使用互斥锁。","score":1557504000899,"article_ctime":1557504000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/29\/f1\/298896d4f26f0cec234f4005eb96b8f1.mp3","id":95098,"had_viewed":false,"audio_size":7777910,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/23\/92\/238119dca29b02db9189b5bad7f1fa92.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"33 | Thread-Per-Message模式：最简单实用的分工方法","audio_time":"00:08:05","audio_title":"5.13 宝令 33_2_01","author_name":"王宝令","audio_md5":"298896d4f26f0cec234f4005eb96b8f1","article_sharetitle":"Thread-Per-Message模式：最简单实用的分工方法","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"05","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/29\/f1\/298896d4f26f0cec234f4005eb96b8f1\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"并发编程领域里，解决分工问题也有一系列的设计模式，其中就有我们今天要重点介绍的Thread-Per-Message模式。","score":1557763200827,"article_ctime":1557763200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/47\/34\/4750018e86e3711c0ee2b0cc391bd934.mp3","id":95525,"had_viewed":false,"audio_size":7191195,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b7\/b5\/b7c7c39cfc84593e0274d03b8defd0b5.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"34 | Worker Thread模式：如何避免重复创建线程？","audio_time":"00:07:28","audio_title":"5.15 宝令 34_01","author_name":"王宝令","audio_md5":"4750018e86e3711c0ee2b0cc391bd934","article_sharetitle":"Worker Thread模式：如何避免重复创建线程？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"07","s":"28","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/47\/34\/4750018e86e3711c0ee2b0cc391bd934\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Worker Thread模式能避免线程频繁创建、销毁的问题，而且能够限制线程的最大数量。","score":1557936000498,"article_ctime":1557936000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/28\/b2\/28f883182e84fb3136727446cc549fb2.mp3","id":95847,"had_viewed":false,"audio_size":7991001,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/75\/0a\/758c04e2f9f4c8a696696f550b1cea0a.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"35 | 两阶段终止模式：如何优雅地终止线程？","audio_time":"00:08:18","audio_title":"5.16 宝令 35_01","author_name":"王宝令","audio_md5":"28f883182e84fb3136727446cc549fb2","article_sharetitle":"两阶段终止模式：如何优雅地终止线程？","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"18","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/28\/b2\/28f883182e84fb3136727446cc549fb2\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"两阶段终止模式是一种应用很广泛的并发设计模式，在Java语言中用于优雅地终止线程。","score":1558108800998,"article_ctime":1558108800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/3b\/4c\/3be76f3ed1e163a2aa767b74dd7c264c.mp3","id":96168,"had_viewed":false,"audio_size":7567742,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/8b\/70\/8b8b84f4df1fc41f6183b31d95e3a270.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"36 | 生产者-消费者模式：用流水线思想提高效率","audio_time":"00:07:52","audio_title":"宝令36～36_01","author_name":"王宝令","audio_md5":"3be76f3ed1e163a2aa767b74dd7c264c","article_sharetitle":"生产者-消费者模式：用流水线思想提高效率","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"07","s":"52","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/3b\/4c\/3be76f3ed1e163a2aa767b74dd7c264c\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"除了在线程池中的应用，为了提升性能，并发编程领域很多地方也都用到了生产者-消费者模式。","score":1558368000102,"article_ctime":1558368000},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/18\/e4\/182e9c98c3f15dba1035af1defc512e4.mp3","id":96736,"had_viewed":false,"audio_size":6765580,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/d0\/0e\/d0888fbf128aa1558eb17ce26adef70e.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"634","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"37 | 设计模式模块热点问题答疑","audio_time":"00:07:02","audio_title":"5.21 宝令 37_01","author_name":"王宝令","audio_md5":"182e9c98c3f15dba1035af1defc512e4","article_sharetitle":"设计模式模块热点问题答疑","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"07","s":"02","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/18\/e4\/182e9c98c3f15dba1035af1defc512e4\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"本文对前面的9种设计模式做个分类和总结，同时也对前面各章的课后思考题做个答疑。","score":1558540800602,"article_ctime":1558540800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/f6\/ba\/f6886442618684af26003b3dda798fba.mp3","id":97231,"had_viewed":false,"audio_size":8804147,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/9d\/50\/9dd0ce93a7103552cd445766869b2150.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"635","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"38 | 案例分析（一）：高性能限流器Guava RateLimiter","audio_time":"00:09:09","audio_title":"5.23 宝令 38 (1)_01","author_name":"王宝令","audio_md5":"f6886442618684af26003b3dda798fba","article_sharetitle":"案例分析（一）：高性能限流器Guava RateLimiter","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"09","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/f6\/ba\/f6886442618684af26003b3dda798fba\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"本文介绍了Guava是如何实现令牌桶算法的，Guava RateLimiter扩展了该算法，解决了高并发下的限流问题。","score":1558713600635,"article_ctime":1558713600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/06\/85\/068c0e218368700a2bc4befb300b2985.mp3","id":97622,"had_viewed":false,"audio_size":8344906,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/8b\/66\/8bbaab9f6ee4dac70a6aa7f060239a66.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"635","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"39 | 案例分析（二）：高性能网络应用框架Netty","audio_time":"00:08:41","audio_title":"宝令39（新新修改）～5.27 宝令 39_01_01","author_name":"王宝令","audio_md5":"068c0e218368700a2bc4befb300b2985","article_sharetitle":"案例分析（二）：高性能网络应用框架Netty","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"41","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/06\/85\/068c0e218368700a2bc4befb300b2985\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Netty是一个款优秀的网络编程框架，性能非常好。它的线程模型设计得很精巧，从而避免了并发程序的各种问题。","score":1558972800583,"article_ctime":1558972800},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/b7\/b6\/b7a92ee600edee299532363de07d36b6.mp3","id":98134,"had_viewed":false,"audio_size":11801126,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/c9\/65\/c9d5c20e2acd5c065dd729e4c262ac65.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"635","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"40 | 案例分析（三）：高性能队列Disruptor","audio_time":"00:12:17","audio_title":"宝令xiugaiban40_01_01","author_name":"王宝令","audio_md5":"b7a92ee600edee299532363de07d36b6","article_sharetitle":"案例分析（三）：高性能队列Disruptor","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"12","s":"17","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/b7\/b6\/b7a92ee600edee299532363de07d36b6\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Disruptor是一款高性能的有界内存队列，目前应用非常广泛。","score":1559145600163,"article_ctime":1559145600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/4a\/2b\/4aa22f1ad88a545fba12e6f69a2cbc2b.mp3","id":98491,"had_viewed":false,"audio_size":9022659,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/80\/12\/80a6a61eba85c160677262ce59ef2912.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"635","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"41 | 案例分析（四）：高性能数据库连接池HiKariCP","audio_time":"00:09:23","audio_title":"5.30 宝令41_01","author_name":"王宝令","audio_md5":"4aa22f1ad88a545fba12e6f69a2cbc2b","article_sharetitle":"案例分析（四）：高性能数据库连接池HiKariCP","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"09","s":"23","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/4a\/2b\/4aa22f1ad88a545fba12e6f69a2cbc2b\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"HiKariCP号称业界跑得最快的数据库连接池。FastList和ConcurrentBag这两个数据结构使用得很巧妙。","score":1559318400391,"article_ctime":1559318400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/55\/75\/55cdd492a49d1fd9532e53aa1004fa75.mp3","id":98903,"had_viewed":false,"audio_size":7888415,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/0c\/56\/0c4924dfe69f6ee59cc787ce8c251256.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"636","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"42 | Actor模型：面向对象原生的并发模型","audio_time":"00:08:12","audio_title":"6.2 宝令 42_01","author_name":"王宝令","audio_md5":"55cdd492a49d1fd9532e53aa1004fa75","article_sharetitle":"Actor模型：面向对象原生的并发模型","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"12","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/55\/75\/55cdd492a49d1fd9532e53aa1004fa75\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Actor模型是一种非常简单的计算模型，基本的计算单元称为Actor。","score":1559577600137,"article_ctime":1559577600},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/a3\/ce\/a3c1bfcb3946a823b59da193a830aece.mp3","id":99251,"had_viewed":false,"audio_size":7279182,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/8b\/b2\/8b093f8620e13f4bb6a0eb365ec059b2.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"636","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"43 | 软件事务内存：借鉴数据库的并发经验","audio_time":"00:07:34","audio_title":"修改 宝令43_01","author_name":"王宝令","audio_md5":"a3c1bfcb3946a823b59da193a830aece","article_sharetitle":"软件事务内存：借鉴数据库的并发经验","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"07","s":"34","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/a3\/ce\/a3c1bfcb3946a823b59da193a830aece\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"很多编程语言都有从数据库的事务管理中获得灵感，并且总结出了一个新的并发解决方案：软件事务内存，简称STM。","score":1559750400000,"article_ctime":1559750400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/ba\/06\/ba6e712ec378d7a8a18ccaa81a4f5206.mp3","id":99787,"had_viewed":false,"audio_size":7903010,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/6d\/51\/6da387002fb8634162aa8e8eaca13a51.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"636","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"44 | 协程：更轻量级的线程","audio_time":"00:08:13","audio_title":"6.7 宝令 44_01","author_name":"王宝令","audio_md5":"ba6e712ec378d7a8a18ccaa81a4f5206","article_sharetitle":"协程：更轻量级的线程","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"13","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/ba\/06\/ba6e712ec378d7a8a18ccaa81a4f5206\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"无论是从时间维度还是空间维度来看，协程都比线程轻量得多。相信不久的将来，Java程序员也可以使用协程来解决并发问题了。","score":1559923200412,"article_ctime":1559923200},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/b7\/d6\/b7b0c4eb9cf2a5064c25fde0ac247ed6.mp3","id":100098,"had_viewed":false,"audio_size":7836294,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/3f\/52\/3fccdeb598bc0861decf990e49f3fe52.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"636","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"45 | CSP模型：Golang的主力队员","audio_time":"00:08:09","audio_title":"6.10 宝令 45_01","author_name":"王宝令","audio_md5":"b7b0c4eb9cf2a5064c25fde0ac247ed6","article_sharetitle":"CSP模型：Golang的主力队员","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"08","s":"09","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/b7\/d6\/b7b0c4eb9cf2a5064c25fde0ac247ed6\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"Golang中虽然也支持传统的共享内存的协程间通信方式，但是推荐的还是使用CSP模型，以通信的方式共享内存。","score":1560182400985,"article_ctime":1560182400},{"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/a7\/98\/a7753bb18b327baa1762cfc9ff926c98.mp3","id":100627,"had_viewed":false,"audio_size":3190080,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/a9\/29\/a98ad0a4726241d05684258c05834729.jpg","had_freelyread":false,"is_video_preview":false,"chapter_id":"678","column_had_sub":false,"audio_dubber":"王宝令","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"article_title":"结束语 | 十年之后，初心依旧","audio_time":"00:03:18","audio_title":"6.12 宝令 46_01","author_name":"王宝令","audio_md5":"a7753bb18b327baa1762cfc9ff926c98","article_sharetitle":"十年之后，初心依旧","column_bgcolor":"#cbd0de","audio_time_arr":{"m":"03","s":"18","h":"00"},"audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/a7\/98\/a7753bb18b327baa1762cfc9ff926c98\/ld\/ld.m3u8","article_could_preview":false,"include_audio":true,"article_summary":"最后咱们轻松一下吧，聊聊人生、聊聊理想，正好我也和你聊聊我那些“不堪回首的往事”。","score":1560355200526,"article_ctime":1560355200},{"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/bd\/aa\/bd327382d6ac9bba02e6e4fb8da543aa.jpg","article_subtitle":"","is_video_preview":false,"id":102300,"had_viewed":false,"article_title":"用户来信 | 真好，面试考到这些并发编程，我都答对了！","include_audio":false,"had_freelyread":false,"article_could_preview":false,"article_summary":"真的很庆幸提前遇到了并发专栏，我的面试顺利通过了。","column_had_sub":false,"chapter_id":"688","score":1561046400675,"article_ctime":1561046400},{"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/ff\/2f\/ff007c1b83586f9ac4c11da5c9224e2f.jpg","article_subtitle":"","is_video_preview":false,"id":105074,"had_viewed":false,"article_title":"3 个用户来信 | 打开一个新的并发世界","include_audio":false,"had_freelyread":false,"article_could_preview":false,"article_summary":"很高兴能再次收到用户的来信，一下子还是 3 封，真是受宠若惊。","column_had_sub":false,"chapter_id":"688","score":1562169600415,"article_ctime":1562169600}],"page":{"count":50,"more":false}},"code":0}